package com.splmeter.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.splmeter.entities.SoundSource;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SOUND_SOURCE".
*/
public class SoundSourceDao extends AbstractDao<SoundSource, Void> {

    public static final String TABLENAME = "SOUND_SOURCE";

    /**
     * Properties of entity SoundSource.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Ssi_id = new Property(0, Integer.class, "ssi_id", false, "SSI_ID");
        public final static Property Ssi_code = new Property(1, String.class, "ssi_code", false, "SSI_CODE");
        public final static Property Ssi_type = new Property(2, String.class, "ssi_type", false, "SSI_TYPE");
        public final static Property Ssi_item_cn = new Property(3, String.class, "ssi_item_cn", false, "SSI_ITEM_CN");
        public final static Property Ssi_item_en = new Property(4, String.class, "ssi_item_en", false, "SSI_ITEM_EN");
    };


    public SoundSourceDao(DaoConfig config) {
        super(config);
    }
    
    public SoundSourceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SOUND_SOURCE\" (" + //
                "\"SSI_ID\" INTEGER," + // 0: ssi_id
                "\"SSI_CODE\" TEXT," + // 1: ssi_code
                "\"SSI_TYPE\" TEXT," + // 2: ssi_type
                "\"SSI_ITEM_CN\" TEXT," + // 3: ssi_item_cn
                "\"SSI_ITEM_EN\" TEXT);"); // 4: ssi_item_en
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SOUND_SOURCE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SoundSource entity) {
        stmt.clearBindings();
 
        Integer ssi_id = entity.getSsi_id();
        if (ssi_id != null) {
            stmt.bindLong(1, ssi_id);
        }
 
        String ssi_code = entity.getSsi_code();
        if (ssi_code != null) {
            stmt.bindString(2, ssi_code);
        }
 
        String ssi_type = entity.getSsi_type();
        if (ssi_type != null) {
            stmt.bindString(3, ssi_type);
        }
 
        String ssi_item_cn = entity.getSsi_item_cn();
        if (ssi_item_cn != null) {
            stmt.bindString(4, ssi_item_cn);
        }
 
        String ssi_item_en = entity.getSsi_item_en();
        if (ssi_item_en != null) {
            stmt.bindString(5, ssi_item_en);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public SoundSource readEntity(Cursor cursor, int offset) {
        SoundSource entity = new SoundSource( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // ssi_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ssi_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ssi_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ssi_item_cn
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // ssi_item_en
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SoundSource entity, int offset) {
        entity.setSsi_id(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setSsi_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSsi_type(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSsi_item_cn(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSsi_item_en(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(SoundSource entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(SoundSource entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
