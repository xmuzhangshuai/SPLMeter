package com.splmeter.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.splmeter.entities.Mode;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MODE".
*/
public class ModeDao extends AbstractDao<Mode, Void> {

    public static final String TABLENAME = "MODE";

    /**
     * Properties of entity Mode.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Mode_id = new Property(0, Integer.class, "mode_id", false, "MODE_ID");
        public final static Property Mode_code = new Property(1, String.class, "mode_code", false, "MODE_CODE");
        public final static Property Mode_name_cn = new Property(2, String.class, "mode_name_cn", false, "MODE_NAME_CN");
        public final static Property Mode_name_en = new Property(3, String.class, "mode_name_en", false, "MODE_NAME_EN");
    };


    public ModeDao(DaoConfig config) {
        super(config);
    }
    
    public ModeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MODE\" (" + //
                "\"MODE_ID\" INTEGER UNIQUE ," + // 0: mode_id
                "\"MODE_CODE\" TEXT," + // 1: mode_code
                "\"MODE_NAME_CN\" TEXT," + // 2: mode_name_cn
                "\"MODE_NAME_EN\" TEXT);"); // 3: mode_name_en
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MODE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Mode entity) {
        stmt.clearBindings();
 
        Integer mode_id = entity.getMode_id();
        if (mode_id != null) {
            stmt.bindLong(1, mode_id);
        }
 
        String mode_code = entity.getMode_code();
        if (mode_code != null) {
            stmt.bindString(2, mode_code);
        }
 
        String mode_name_cn = entity.getMode_name_cn();
        if (mode_name_cn != null) {
            stmt.bindString(3, mode_name_cn);
        }
 
        String mode_name_en = entity.getMode_name_en();
        if (mode_name_en != null) {
            stmt.bindString(4, mode_name_en);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public Mode readEntity(Cursor cursor, int offset) {
        Mode entity = new Mode( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // mode_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mode_code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mode_name_cn
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // mode_name_en
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Mode entity, int offset) {
        entity.setMode_id(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setMode_code(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMode_name_cn(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMode_name_en(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(Mode entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(Mode entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
